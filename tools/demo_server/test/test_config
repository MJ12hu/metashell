#!/usr/bin/python
"""Test the config file"""

# Metashell - Interactive C++ template metaprogramming shell
# Copyright (C) 2016, Abel Sinkovics (abel@sinkovics.hu)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import unittest
import util


MODULE_UNDER_TEST = util.load_from_bin('deploy')


def no_logging(_):
    """A null logger"""
    pass


def environment_variable(name):
    """Returns the value of the environment variable"""
    if name in os.environ:
        return os.environ[name]
    else:
        raise Exception('{0} environment variable is not set'.format(name))


def load_config():
    """Loads the config file"""
    return MODULE_UNDER_TEST.load_config_file(
        environment_variable('CONFIG'),
        no_logging
    )


def config_of(name):
    """Returns a config from the config file"""
    for config in load_config():
        if config['name'] == name:
            return config
    raise Exception('Config {0} is not in the config file'.format(name))


# pylint: disable=missing-docstring
# pylint: disable=invalid-name
# pylint: disable=too-many-public-methods


class TestConfig(unittest.TestCase):

    def test_binaries_are_available(self):
        config = config_of('metashell')

        self.assertTrue('bin' in config)

        src_root = environment_variable('SRC_ROOT')
        for path in config['bin']:
            full_path = os.path.join(src_root, path)
            path_if_exists = full_path if os.path.exists(full_path) else ''
            self.assertEqual(path_if_exists, full_path)


if __name__ == '__main__':
    unittest.main()
